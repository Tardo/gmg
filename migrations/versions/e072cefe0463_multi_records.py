"""Multi records

Revision ID: e072cefe0463
Revises: 9fa02b066d0d
Create Date: 2022-04-23 05:45:13.489442

"""
import gmgl
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from gmgl.utils import b642bin, bin2b64, gen_sha256_from_memory, get_url_filename_format

# revision identifiers, used by Alembic.
revision = 'e072cefe0463'
down_revision = '9fa02b066d0d'
branch_labels = None
depends_on = None


def _upgrade_move_user_avatars(session):
    avatars = session.execute(
        'select id, avatar, avatar_url from analyzer_user where avatar is not null'
    )
    for line in avatars:
        avatar_bin = (b642bin(line[1])).read()
        avatar_hash_ref = gen_sha256_from_memory(avatar_bin)
        avatar_extension = get_url_filename_format(line[2])
        result = session.execute(
            'select id from attachment where hash_ref = :hash_ref',
            {'hash_ref': avatar_hash_ref},
        )
        if result.rowcount == 0:
            result = session.execute(
                'insert into attachment (data, hash_ref, mimetype) values (:data, :hash_ref, :mimetype) returning id',
                {
                    'data': avatar_bin,
                    'hash_ref': avatar_hash_ref,
                    'mimetype': f'image/{avatar_extension}',
                },
            )
            attachment_id = result.fetchone()[0]
        else:
            attachment_id = result.fetchone()[0]
        session.execute(
            'insert into rel_analyzer_user_avatar_attachment (analyzer_user_id, attachment_id) values (:analyzer_user_id, :attachment_id)',
            {'analyzer_user_id': line[0], 'attachment_id': attachment_id},
        )


def _upgrade_move_user_comments(session):
    posts = session.execute(
        'select id, date_edit, content, content_clean from analyzer_post'
    )
    for line in posts:
        result = session.execute(
            f'insert into analyzer_post_comment (post_id, date, content, content_clean) values (:post_id, :date, :content, :content_clean) returning id',
            {
                'post_id': line[0],
                'date': line[1],
                'content': line[2],
                'content_clean': line[3],
            },
        )
        post_comment_id = result.fetchone()[0]
        session.execute(
            'insert into rel_analyzer_post_analyzer_post_comment (analyzer_post_id, analyzer_post_comment_id) values (:analyzer_post_id, :analyzer_post_comment_id)',
            {'analyzer_post_id': line[0], 'analyzer_post_comment_id': post_comment_id},
        )


def _upgrade_sites(session):
    session.execute(
        'update site set post_per_page=30 where ref = :ref', {'ref': 'mediavida'}
    )


def upgrade():
    bind = op.get_bind()
    session = sa.orm.Session(bind=bind)

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'attachment',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column(
            'create_date',
            sa.DateTime(timezone=True),
            server_default=sa.text('now()'),
            nullable=True,
        ),
        sa.Column('write_date', sa.DateTime(timezone=True), nullable=True),
        sa.Column('data', sa.LargeBinary(), nullable=False),
        sa.Column('hash_ref', sa.String(length=64), nullable=False),
        sa.Column('mimetype', sa.String(length=32), nullable=False),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_index(
        op.f('ix_attachment_hash_ref'), 'attachment', ['hash_ref'], unique=True
    )
    op.create_table(
        'web_event_type',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column(
            'create_date',
            sa.DateTime(timezone=True),
            server_default=sa.text('now()'),
            nullable=True,
        ),
        sa.Column('write_date', sa.DateTime(timezone=True), nullable=True),
        sa.Column('short_name', sa.String(length=64), nullable=True),
        sa.Column('name', sa.String(length=255), nullable=True),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_index(
        op.f('ix_web_event_type_short_name'),
        'web_event_type',
        ['short_name'],
        unique=True,
    )
    op.create_table(
        'rel_analyzer_user_avatar_attachment',
        sa.Column('analyzer_user_id', sa.Integer(), nullable=True),
        sa.Column('attachment_id', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ['analyzer_user_id'],
            ['analyzer_user.id'],
        ),
        sa.ForeignKeyConstraint(
            ['attachment_id'],
            ['attachment.id'],
        ),
    )
    op.create_table(
        'analyzer_post_comment',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column(
            'create_date',
            sa.DateTime(timezone=True),
            server_default=sa.text('now()'),
            nullable=True,
        ),
        sa.Column('write_date', sa.DateTime(timezone=True), nullable=True),
        sa.Column('post_id', sa.Integer(), nullable=False),
        sa.Column('date', sa.DateTime(timezone=True), nullable=False),
        sa.Column('content', sa.Text(), nullable=True),
        sa.Column('content_clean', sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ['post_id'],
            ['analyzer_post.id'],
        ),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_index(
        op.f('ix_analyzer_post_comment_post_id'),
        'analyzer_post_comment',
        ['post_id'],
        unique=False,
    )
    op.create_table(
        'analyzer_web_event',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column(
            'create_date',
            sa.DateTime(timezone=True),
            server_default=sa.text('now()'),
            nullable=True,
        ),
        sa.Column('write_date', sa.DateTime(timezone=True), nullable=True),
        sa.Column('type_id', sa.Integer(), nullable=False),
        sa.Column('origin_post_id', sa.Integer(), nullable=True),
        sa.Column('post_id', sa.Integer(), nullable=True),
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.Column('user_count', sa.Integer(), nullable=True),
        sa.Column('old_avatar_id', sa.Text(), nullable=True),
        sa.Column('new_avatar_id', sa.Text(), nullable=True),
        sa.Column('ref_id', sa.Integer(), nullable=True),
        sa.Column('site_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ['origin_post_id'],
            ['analyzer_post.id'],
        ),
        sa.ForeignKeyConstraint(
            ['post_id'],
            ['analyzer_post.id'],
        ),
        sa.ForeignKeyConstraint(
            ['site_id'],
            ['site.id'],
        ),
        sa.ForeignKeyConstraint(
            ['type_id'],
            ['web_event_type.id'],
        ),
        sa.ForeignKeyConstraint(
            ['user_id'],
            ['analyzer_user.id'],
        ),
        sa.PrimaryKeyConstraint('id'),
    )
    op.create_index(
        op.f('ix_analyzer_web_event_ref_id'),
        'analyzer_web_event',
        ['ref_id'],
        unique=False,
    )
    op.create_index(
        op.f('ix_analyzer_web_event_site_id'),
        'analyzer_web_event',
        ['site_id'],
        unique=False,
    )
    op.create_index(
        op.f('ix_analyzer_web_event_type_id'),
        'analyzer_web_event',
        ['type_id'],
        unique=False,
    )
    op.create_table(
        'rel_analyzer_post_analyzer_post_comment',
        sa.Column('analyzer_post_id', sa.Integer(), nullable=True),
        sa.Column('analyzer_post_comment_id', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ['analyzer_post_comment_id'],
            ['analyzer_post_comment.id'],
        ),
        sa.ForeignKeyConstraint(
            ['analyzer_post_id'],
            ['analyzer_post.id'],
        ),
    )
    op.add_column('site', sa.Column('post_per_page', sa.Integer(), nullable=True))
    _upgrade_move_user_avatars(session)
    _upgrade_move_user_comments(session)
    op.drop_table('user')
    op.drop_column('analyzer_post', 'date_edit')
    op.drop_column('analyzer_post', 'content_clean')
    op.drop_column('analyzer_post', 'content')
    op.drop_column('analyzer_post', 'is_edited')
    op.drop_index('ix_analyzer_post_media_ref_id', table_name='analyzer_post_media')
    op.drop_index('ix_analyzer_post_media_site_id', table_name='analyzer_post_media')
    op.drop_constraint(
        'analyzer_post_media_site_id_fkey', 'analyzer_post_media', type_='foreignkey'
    )
    op.drop_column('analyzer_post_media', 'site_id')
    op.drop_column('analyzer_post_media', 'ref_id')
    op.drop_index('ix_analyzer_post_stat_ref_id', table_name='analyzer_post_stat')
    op.drop_index('ix_analyzer_post_stat_site_id', table_name='analyzer_post_stat')
    op.drop_constraint(
        'analyzer_post_stat_site_id_fkey', 'analyzer_post_stat', type_='foreignkey'
    )
    op.drop_column('analyzer_post_stat', 'site_id')
    op.drop_column('analyzer_post_stat', 'ref_id')
    op.drop_column('analyzer_user', 'avatar_url')
    op.drop_column('analyzer_user', 'avatar')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('site', 'post_per_page')
    op.add_column(
        'analyzer_user',
        sa.Column('avatar', sa.TEXT(), autoincrement=False, nullable=True),
    )
    op.add_column(
        'analyzer_user',
        sa.Column('avatar_url', sa.TEXT(), autoincrement=False, nullable=True),
    )
    op.add_column(
        'analyzer_post_stat',
        sa.Column('ref_id', sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        'analyzer_post_stat',
        sa.Column('site_id', sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.create_foreign_key(
        'analyzer_post_stat_site_id_fkey',
        'analyzer_post_stat',
        'site',
        ['site_id'],
        ['id'],
    )
    op.create_index(
        'ix_analyzer_post_stat_site_id', 'analyzer_post_stat', ['site_id'], unique=False
    )
    op.create_index(
        'ix_analyzer_post_stat_ref_id', 'analyzer_post_stat', ['ref_id'], unique=False
    )
    op.add_column(
        'analyzer_post_media',
        sa.Column('ref_id', sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        'analyzer_post_media',
        sa.Column('site_id', sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.create_foreign_key(
        'analyzer_post_media_site_id_fkey',
        'analyzer_post_media',
        'site',
        ['site_id'],
        ['id'],
    )
    op.create_index(
        'ix_analyzer_post_media_site_id',
        'analyzer_post_media',
        ['site_id'],
        unique=False,
    )
    op.create_index(
        'ix_analyzer_post_media_ref_id', 'analyzer_post_media', ['ref_id'], unique=False
    )
    op.add_column(
        'analyzer_post',
        sa.Column('is_edited', sa.BOOLEAN(), autoincrement=False, nullable=False),
    )
    op.add_column(
        'analyzer_post',
        sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True),
    )
    op.add_column(
        'analyzer_post',
        sa.Column('content_clean', sa.TEXT(), autoincrement=False, nullable=True),
    )
    op.add_column(
        'analyzer_post',
        sa.Column(
            'date_edit',
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.create_table(
        'user',
        sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            'create_date',
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text('now()'),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            'write_date',
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            'last_login_date',
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            'username', sa.VARCHAR(length=12), autoincrement=False, nullable=False
        ),
        sa.Column(
            'passwd_hash', sa.VARCHAR(length=128), autoincrement=False, nullable=False
        ),
        sa.Column(
            'timezone', sa.VARCHAR(length=32), autoincrement=False, nullable=True
        ),
        sa.Column('is_admin', sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint('id', name='user_pkey'),
        sa.UniqueConstraint('username', name='user_username_key'),
    )
    op.drop_table('rel_analyzer_post_analyzer_post_comment')
    op.drop_index(
        op.f('ix_analyzer_web_event_type_id'), table_name='analyzer_web_event'
    )
    op.drop_index(
        op.f('ix_analyzer_web_event_site_id'), table_name='analyzer_web_event'
    )
    op.drop_index(op.f('ix_analyzer_web_event_ref_id'), table_name='analyzer_web_event')
    op.drop_table('analyzer_web_event')
    op.drop_index(
        op.f('ix_analyzer_post_comment_post_id'), table_name='analyzer_post_comment'
    )
    op.drop_table('analyzer_post_comment')
    op.drop_table('rel_analyzer_user_avatar_attachment')
    op.drop_index(op.f('ix_web_event_type_short_name'), table_name='web_event_type')
    op.drop_table('web_event_type')
    op.drop_index(op.f('ix_attachment_hash_ref'), table_name='attachment')
    op.drop_table('attachment')
    # ### end Alembic commands ###
