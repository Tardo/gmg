stages:
  - test
  - deploy

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache"
  PYTHONDONTWRITEBYTECODE: 1
  PYTHONUNBUFFERED: 1
  DEBIAN_FRONTEND: noninteractive

test:
  stage: test
  image: python:3.10
  services:
    - postgres:12.2-alpine
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .venv
      - .cache
      - .npm
      - .n
      - node_modules
  variables:
    N_PREFIX: "$CI_PROJECT_DIR/.n"
    POSTGRES_DB: $POSTGRES_DB
    POSTGRES_USER: $POSTGRES_USER
    POSTGRES_PASSWORD: $POSTGRES_PASSWORD
    POSTGRES_HOST_AUTH_METHOD: trust
    FLASK_ENV: testing
    NODE_ENV: testing
    POETRY_NO_INTERACTION: 1
    POETRY_NO_DEV: 1
    GMG_DATABASE_URI: "postgresql+psycopg2://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres/$POSTGRES_DB"
  before_script:
    - export PATH=$N_PREFIX/bin:$PATH
    - python -m pip install --upgrade pip
    - pip install poetry
    - curl -L https://raw.githubusercontent.com/tj/n/master/bin/n -o n
    - bash n latest
    - npm ci --cache .npm --prefer-offline
    - npm install --global npm
    - npm install --global postcss postcss-cli rollup
    - poetry config virtualenvs.in-project true
    - poetry install
    - npm install
    - poetry run flask gmg install_test
  script:
    - poetry run npm run test:pytest

deploy:
  stage: deploy
  image: alpine:latest
  only:
    - master
  before_script:
    - "command -v ssh-agent >/dev/null || ( apk add --update openssh )"
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $HOST_DEPLOY >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh $SSH_USER@$HOST_DEPLOY "cd $FOLDER_DEPLOY/data/src && git pull
      --rebase origin master && docker-compose down || true"
    - ssh $SSH_USER@$HOST_DEPLOY "cd $FOLDER_DEPLOY && docker-compose -f
      hard_update.yaml up && docker-compose down || true"
    - ssh $SSH_USER@$HOST_DEPLOY "cd $FOLDER_DEPLOY && docker-compose up -d"
